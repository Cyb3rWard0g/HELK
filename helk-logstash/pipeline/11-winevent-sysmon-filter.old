# HELK sysmon filter conf file
# HELK build version: 0.9 (Alpha)
# Author: Roberto Rodriguez (@Cyb3rWard0g)
# License: BSD 3-Clause
filter {
     cidr {
         add_field => { "IPDestination" => "Private" }
         address => [ "%{[event_data][DestinationIp]}" ]
         network => [ "192.168.0.0/16", "10.0.0.0/8", "172.16.0.0/12"]
        }

     cidr {
         add_field => { "IPDestination" => "Private" }
         address => [ "%{[event_data][DestinationIp]}" ]
         network => [ "192.168.0.0/16", "10.0.0.0/8", "172.16.0.0/12"]


         
        }

  if [log_name] == "Microsoft-Windows-Sysmon/Operational" {




    mutate {
      rename => {
        "[user][domain]" => "user_reporter_domain"
        "[user][identifier]" => "user_reporter_sid"
        "[user][name]" => "user_reporter_name"
        "[user][type]" => "user_reporter_type"
        "computer_name" => "host_name"
      }
    }
    if [provider_guid] {
      mutate {
        gsub => ["provider_guid","[{}]",""]
      }
    }
    if [event_data][Image] {
      if [event_data][Image] =~ /^(\w*$)|^(\w*\..*$)/ {
        mutate {
          copy => {"[event_data][Image]" => "process_name"}
        }
      }
      else {
        grok {
          match => { "[event_data][Image]" => ".*\\%{GREEDYDATA:process_name}" }
          tag_on_failure => [ "_grokparsefailure", "_parsefailure" ]
        }
      }
      mutate {
        rename => {
          "[event_data][Image]" => "process_path"
          "[event_data][ProcessGuid]" => "process_guid"
          "[event_data][ProcessId]" => "process_id"
        }
        gsub => ["process_guid","[{}]",""]
      }
    }
    if [event_data][ParentImage] {
      grok {
        match => { "[event_data][ParentImage]" => ".*\\%{GREEDYDATA:process_parent_name}" }
        tag_on_failure => [ "_grokparsefailure", "_parsefailure" ]
      }
    }
    if [event_data][Hashes] {
      kv {
        source => "[event_data][Hashes]"
        field_split => ","
        value_split => "="
        prefix => "hash_"
        transform_key => "lowercase"
      }
    }
    if [event_data][TargetImage] {
      grok { 
        match => { "[event_data][SourceImage]" => ".*\\%{GREEDYDATA:process_name}" }
        tag_on_failure => [ "_grokparsefailure", "_parsefailure" ]
      }
      grok { 
        match => { "[event_data][TargetImage]" => ".*\\%{GREEDYDATA:process_target_name}" }
        tag_on_failure => [ "_grokparsefailure", "_parsefailure" ]
      }
      mutate {
        rename => {
          "[event_data][SourceImage]" => "process_path"
          "[event_data][SourceProcessGUID]" => "process_guid"
          "[event_data][SourceProcessId]" => "process_id"
          "[event_data][TargetImage]" => "process_target_path"
          "[event_data][TargetProcessGUID]" => "process_target_guid"
          "[event_data][TargetProcessId]" => "process_target_id"
        }
        gsub => ["process_guid","[{}]",""]
        gsub => ["process_target_guid","[{}]",""]
      }
    }
    if [event_data][User] {
      grok {
        match => { "[event_data][User]" => "%{GREEDYDATA:user_domain}\\%{GREEDYDATA:user_name}" }
        tag_on_failure => [ "_grokparsefailure", "_parsefailure" ]
      }
    }
    if [event_data][LogonId] {
      mutate { rename => { "[event_data][LogonId]" => "user_logon_id" }}
      mutate { gsub => [ "user_logon_id", "0x", "" ]}
      ruby {
        code => "
          userlogonid = event.get('user_logon_id')
          userlogonid = userlogonid.hex
          event.set('user_logon_id', userlogonid)
        "
        tag_on_exception =>  "_0591_rubyexception"
      }
    }
    if [event_id] == 1 {
      mutate {
        add_field => { "action" => "processcreate" }
        rename => {
          "[event_data][CommandLine]" => "process_command_line"
          "[event_data][CurrentDirectory]" => "process_current_directory"
          "[event_data][ParentImage]" => "process_parent_path"
          "[event_data][ParentCommandLine]" => "process_parent_command_line"
          "[event_data][IntegrityLevel]" => "process_integrity_level"
          "[event_data][LogonGuid]" => "user_logon_guid"
          "[event_data][ParentProcessGuid]" => "process_parent_guid"
          "[event_data][ParentProcessId]" => "process_parent_id"
          "[event_data][TerminalSessionId]" => "user_terminal_session_id"
          "[event_data][FileVersion]" => "file_version"
          "[event_data][Description]" => "file_description"
          "[event_data][Product]" => "file_product"
          "[event_data][Company]" => "file_company"
        }
        gsub => ["process_parent_guid","[{}]",""]
        gsub => ["user_logon_guid","[{}]",""]
      }
    }
    if [event_id] == 2 {
      mutate {
        add_field => { "action" => "filecreatetime" }
        rename => {
          "[event_data][TargetFileName]" => "file_name"
        }
      }
    }
    if [event_id] == 3 {
      mutate {
        add_field => { "action" => "networkconnect" }
        rename => {
          "[event_data][DestinationHostname]" => "host_dst_name"
          "[event_data][DestinationIp]" => "ip_dst"
          "[event_data][DestinationIsIpv6]" => "ip_dst_isipv6"
          "[event_data][DestinationPort]" => "port_dst_number"
          "[event_data][DestinationPortName]" => "port_dst_name"
          "[event_data][Initiated]" => "network_initiated"
          "[event_data][Protocol]" => "network_protocol"
          "[event_data][SourceHostname]" => "host_src_name"
          "[event_data][SourceIp]" => "ip_src"
          "[event_data][SourceIsIpv6]" => "ip_src_isipv6"
          "[event_data][SourcePort]" => "port_src_number"
          "[event_data][SourcePortName]" => "port_src_port_name"
        }
      }
      geoip {
        source => "ip_dst"
        remove_field => "[geoip][ip]"
      }
    }
    if [event_id] == 4 {
      mutate {
        add_field => { "action" => "sysmonservicestatechanged" }
        rename => {
          "[event_data][State]" => "service_state"
          "[event_data][Version]" => "sysmon_version"
          "[event_data][SchemaVersion]" => "sysmon_schema_version"
        }
      }
    }
    if [event_id] == 6 {
      mutate {
        add_field => { "action" => "driverload" }
        rename => {
          "[event_data][ImageLoaded]" => "image_loaded"
          "[event_data][Signature]" => "image_signature"
          "[event_data][SignatureStatus]" => "image_signature_status"
          "[event_data][Signed]" => "image_signed"
        }
      }
    }
    if [event_id] == 7 {
      mutate {
        add_field => { "action" => "imageload" }
        rename => {
          "[event_data][ImageLoaded]" => "image_loaded"
          "[event_data][Signature]" => "image_signature"
          "[event_data][SignatureStatus]" => "image_signature_status"
          "[event_data][Signed]" => "image_signed"
        }
      }
    }
    if [event_id] == 8 {
      mutate {
        add_field => { "action" => "createremotethread" }
        rename => {
          "[event_data][NewThreadId]" => "thread_new_id"
          "[event_data][StartAddress]" => "thread_startaddress"
          "[event_data][StartFunction]" => "thread_startfunction"
          "[event_data][StartModule]" => "thread_startmodule"
        }
      }
    }
    if [event_id] == 9 {
      mutate {
        add_field => { "action" => "rawaccessread" }
        rename => {
          "[event_data][Device]" => "device_name"
        }
      }
    }
    if [event_id] == 10 {
      mutate {
        add_field => { "action" => "processaccess" }
        rename => {
          "[event_data][CallTrace]" => "process_calltrace"
          "[event_data][GrantedAccess]" => "process_granted_access"
          "[event_data][SourceThreadId]" => "process_thread_id"
        }
      }
    }
    if [event_id] == 11 {
      mutate {
        add_field => { "action" => "filecreate" }
        rename => {
          "[event_data][TargetFilename]" => "file_name"
        }
      }
    }
    if [event_id] == 12 or [event_id] == 13 or [event_id] == 14 {
      mutate {
        add_field => { "action" => "registryevent" }
        rename => {
          "[event_data][EventType]" => "registry_event_type"
          "[event_data][TargetObject]" => "registry_key_path"
          "[event_data][Details]" => "registry_key_value"
        }
      }
    }
    if [event_id] == 15 {
      mutate {
        add_field => { "action" => "filecreatestreamhash" }
        rename => {
          "[event_data][TargetFilename]" => "file_name"
          "[event_data][Hash]" => "hash"
        }
      }
    }
    if [event_id] == 16 {
      kv {
        source => "[event_data][ConfigurationFileHash]"
        value_split => "="
        prefix => "sysmon_config_hash_"
        transform_key => "lowercase"
      }
      mutate {
        add_field => { "action" => "sysmonconfigstatechanged" }
        rename => {
          "[event_data][State]" => "sysmon_config_state"
          "[event_data][Configuration]" => "sysmon_config"
        }
      }
    }
    if [event_id] == 18 or [event_id] == 17 {
      mutate {
        add_field => { "action" => "pipeevent" }
        rename => {
          "[event_data][PipeName]" => "pipe_name"
        }
      }
    }
    if [event_id] == 19 or [event_id] == 20 or [event_id] == 21 {
      mutate {
        add_field => { "action" => "wmievent" }
        rename => {
          "[event_data][EventType]" => "wmi_event_type"
          "[event_data][Operation]" => "wmi_operation"
          "[event_data][EventNamespace]" => "wmi_namespace"
          "[event_data][Name]" => "wmi_name"
          "[event_data][Query]" => "wmi_query"
          "[event_data][Type]" => "wmi_type"
          "[event_data][Destination]" => "wmi_destination"
        }
      }
    }
    date {
			timezone => "UTC"
      match => [ "[event_data][UtcTime]", "YYYY-MM-dd HH:mm:ss.SSS" ]
      tag_on_failure => [ "_sysmon_datefailure", "_dateparsefailure" ]
    }
    date {
        timezone => "UTC"
        match => [ "[event_data][CreationUtcTime]", "YYYY-MM-dd HH:mm:ss.SSS" ]
        target => "@date_creation"
        tag_on_failure => [ "_sysmon_datefailure", "_dateparsefailure" ]
    }
    date {
      timezone => "UTC"
      match => [ "[event_data][PreviousCreationUtcTime]", "YYYY-MM-dd HH:mm:ss.SSS" ]
      target => "@date_creation_previous"
      tag_on_failure => [ "_sysmon_datefailure", "_dateparsefailure" ]
    }
    mutate {
      remove_field => "[event_data]"
      remove_field => "message"
      remove_field => "[event_data][Hashes]"
      remove_field => "[event_data][ConfigurationFileHash]"
      remove_field => "[event_data][UtcTime]"
      remove_field => "[event_data][CreationUtcTime]"
      remove_field => "[event_data][PreviousCreationUtcTime]"
      remove_field => "[user]"
    }
  }
}

