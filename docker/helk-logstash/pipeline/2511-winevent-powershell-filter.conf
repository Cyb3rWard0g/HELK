# HELK powershell filter conf file
# HELK build Stage: Alpha
# Author: Roberto Rodriguez (@Cyb3rWard0g), Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
  if [source_name] == "Microsoft-Windows-PowerShell" or [source_name] == "PowerShell" {
    mutate {
      add_field => {
        "etl_pipeline" => "winevent-powershell-all-2511"
        "[@metadata][index_name]" => "powershell"
      }
    }

    if [event_id] == 4103 {
      mutate { add_field => { "etl_pipeline" => "powershell-4103-2511" } }
      mutate {
        add_field => {
            "PayloadInvocation" => "%{Payload}"
            "PayloadParams" => "%{Payload}"
        }
        gsub => [
          "ContextInfo", "      ", "",
          "ContextInfo", " = ", "="
        ]
      }
      kv {
        source => "ContextInfo"
        field_split => "\r\n"
        value_split => "="
        remove_char_key => " "
        allow_duplicate_values => false
        include_keys => [
          "Severity",
          "HostName",
          "HostVersion",
          "HostID",
          "HostApplication",
          "EngineVersion",
          "RunspaceID",
          "PipelineID",
          "CommandName",
          "CommandType",
          "ScriptName",
          "CommandPath",
          "SequenceNumber",
          "ConnectedUser",
          "ShellID"
        ]
      }
      mutate {
          gsub => [
            "PayloadInvocation", "CommandInvocation\(.*\)", "CommandInvocation",
            "PayloadInvocation", "ParameterBinding.*\s+", "",
            "PayloadParams", "CommandInvocation.*\s+", "",
            "PayloadParams", "ParameterBinding\(\S+\): ", "|||SPLITMEHEHE|||",
            "Payload", "CommandInvocation.*\s+", "",
            "Payload", "ParameterBinding.*\s+", ""
          ]
      }
      kv {
        source => "PayloadInvocation"
        field_split => "\n"
        value_split => ":"
        allow_duplicate_values => false
        include_keys => [ "CommandInvocation" ]
      }
      ruby {
          code => "
              params_split = event.get('PayloadParams').split('|||SPLITMEHEHE|||')
              params_split = params_split.drop(1)
              params_split_length = params_split.length
              all_names = Array.new
              all_values = Array.new
              all_values_non_alphanumeric = Array.new
              all_contains_net = Array.new
              all_ascii_only = Array.new

              for param in params_split
                  slice_and_dice = param.index('; value=')
                  param_name = param.slice(6..slice_and_dice-2)
                  param_value = param.slice(param.index('value=')..-1)[6..-1]
                  param_value = param_value.strip
                  param_value[0] = ''
                  param_value[-1] = ''
                  value_non_alphanumeric = param_value.gsub(/[A-Za-z0-9\s]+/i, '')
                  #value_lowercased = param_value.downcase

                  if !param_value.nil?
                      all_values.push(param_value)
                      all_values_non_alphanumeric.push(value_non_alphanumeric)
                      has_ascii_only = param_value.ascii_only?
                      all_ascii_only.push(has_ascii_only)
                      #contains_net = value_lowercased.include?('http:') || value_lowercased.include?('ftp:\\') || value_lowercased.include?('smb:\\') || value_lowercased.include?('file:\\') || value_lowercased.include?('://') || value_lowercased.include?('localhost') || /(?<!version=)\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ === value_lowercased
                      #all_contains_net.push(contains_net)
                  end

                  if !param_name.nil?
                      all_names.push(param_name)
                  end

              end
              all_names = all_names.uniq
              all_values = all_values.uniq
              all_values_non_alphanumeric = all_values_non_alphanumeric.uniq
              has_non_ascii = all_ascii_only.include?(false)
              event.set('[@metadata][powershell_param_value_has_non_ascii]', has_non_ascii)
              event.set('[powershell][param][name]', all_names)
              event.set('[powershell][param][value]', all_values)
              event.set('[powershell][param][value_nonalphanumeric]', all_values_non_alphanumeric)
          "
          tag_on_exception =>  "_rubyexception_2511_1"
      }
      prune { blacklist_values => [ "Payload", "^$" ] }
      mutate {
        rename => {
          "CommandName" => "[powershell][command][name]"
          "CommandInvocation" => "[powershell][command][invocation]"
          "CommandPath" => "[powershell][command][path]"
          "CommandType" => "[powershell][command][type]"
          "ConnectedUser" => "[powershell][connected_user]"
          "EngineVersion" => "[powershell][engine_version]"
          "HostApplication" => "[powershell][host][application]"
          "HostID" => "[powershell][host][id]"
          "HostName" => "[powershell][host][name]"
          "HostVersion" => "[powershell][host][version]"
          "PipelineID" => "[powershell][pipeline_id]"
          "RunspaceID" => "[powershell][runspace_id]"
          "ScriptName" => "[powershell][script][name]"
          "SequenceNumber" => "[powershell][sequence_number]"
          "ShellID" => "[powershell][shell_id]"
          "Payload" => "[powershell][remaining_payload]"
        }
        remove_field => [
          "Severity",
          "EventType",
          "Keywords",
          "message",
          "opcode",
          "PayloadInvocation",
          "PayloadParams",
          "Payload",
          "ContextInfo"
        ]
        convert => {
          "[powershell][pipeline_id]" => "integer"
          "[powershell][sequence_number]" => "integer"
        }
      }
    }

    if [event_id] == 4104 {
      mutate { add_field => { "etl_pipeline" => "powershell-4104-2511" } }
      if [ScriptBlockText] {
          mutate { remove_field => [ "message" ] }
      }
      else {
          # Lets use GSUB to make sure we can get things to split on / make it easier more efficient to split on
          grok {
              match => {
                  "message" => "^Creating Scriptblock text \(%{INT:MessageNumber} of %{INT:MessageTotal}\):\s+%{GREEDYDATA:ScriptBlockText}\s+ScriptBlock ID: %{UUID:ScriptBlockId}\s+Path: %{DATA:Path}$"
              }
              break_on_match => true
              keep_empty_captures => false
              named_captures_only => true
              # Sometimes the ScriptBlockText literally could be empty, so you may see this in _grokparesfailure and would then cause a ruby failure below.
              tag_on_failure => [ "_parsefailure", "parsefailure-grok-powershell_4104_01" ]
              tag_on_timeout => "_groktimeout"
              # Timeout 1.5 seconds
              timeout_millis => 1500
              remove_field => [ "message" ]
          }
      }

      if "parsefailure-grok-powershell_4104_01" not in [tags] {
          # Get the length of the ScriptBlockText and some other hunts/fingerprints
          ruby {
              code => "
                  ps_script_block = event.get('ScriptBlockText')
                  if !ps_script_block.nil? || !(ps_script_block.respond_to?(:empty?) && ps_script_block.empty?)
                      ps_script_block_length = ps_script_block.length
                      #ps_script_block = ps_script_block.downcase

                      #contains_net = ps_script_block.include?('http:') || ps_script_block.include?('ftp:\\') || ps_script_block.include?('smb:\\') || ps_script_block.include?('file:\\') || ps_script_block.include?('://') || ps_script_block.include?('localhost') || /(?<!version=)\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ === ps_script_block

                      has_non_ascii = !ps_script_block.ascii_only?

                      #event.set('[@metadata][powershell_scriptblock_text_has_net]', contains_net)
                      event.set('[@metadata][powershell_scriptblock_text_has_non_ascii]', has_non_ascii)
                      event.set('[@metadata][powershell_scriptblock_text_length]', ps_script_block_length)
                  end
              "
              add_field => { "etl_pipeline" => "ruby-2511-002" }
              tag_on_exception => "_rubyexception_2511_002"
          }
      }

      mutate {
        rename => {
          "MessageNumber" => "[powershell][scriptblock][message_number]"
          "MessageTotal" => "[powershell][scriptblock][message_total]"
          "ScriptBlockId" => "[powershell][scriptblock][id]"
          "ScriptBlockText" => "[powershell][scriptblock][text]"
          "Path" => "[powershell][script][path]"
        }
      }

    }

    if [event_id] == 400 or [event_id] == 600 {
      kv {
        source => "param3"
        field_split => "\n"
        value_split => "="
        trim_key => "\t"
        allow_duplicate_values => false
      }
      mutate {
        rename => {
          "ProviderName" => "[powershell][providername]"
          "NewProviderState" => "[powershell][newproviderstate]"
          "SequenceNumber" => "[powershell][sequence_number]"
          "HostName" => "[powershell][host][name]"
          "HostVersion" => "[powershell][host][version]"
          "HostId" => "[powershell][host][id]"
          "HostApplication" => "[powershell][host][application]"
          "EngineVersion" => "[powershell][engine_version]"
          "RunspaceId" => "[powershell][runspace_id]"
          "PipelineId" => "[powershell][pipeline_id]"
          "CommandName" => "[powershell][command][name]"
          "CommandType" => "[powershell][command][type]"
          "ScriptName" => "[powershell][script][name]"
          "CommandPath" => "[powershell][command][path]"
          "CommandLine" => "[powershell][command][line]"
          "NewEngineState" => "[powershell][newengine_state]"
          "PreviousEngineState" => "[powershell][previousengine_state]"
        }
        remove_field => [
          "message",
          "param1",
          "param2",
          "param3"
        ]
      }
    }
  }
}