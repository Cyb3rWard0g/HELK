# HELK winevent-conversions-ip-conversions-basic filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
    # Use this to determine if windows event log or not (for now, until we are properly marking all windows log types as something like "log_type: winevent")
    if [event_id] {

        # Since Sysmon may be the most common EventIDs with IPs lets do that first. This will contain source and destination IPs.
        # Seen in the following EventIDs (not necessarily exhaustive)
        # Microsoft-Windows-Sysmon/Operational:3
        # Parse "SourceIp" field and then afterwards if it exists then the DestinationIp should exist as well (see note above)
        if [SourceIp] {
            mutate {
                rename => {
                    "SourceIp" => "src_ip_addr"
                    "DestinationIp" => "dst_ip_addr"
                }
                add_field => { "etl_pipeline" => "winevent-ip_conversion-SourceIp_and_DestinationIp" }
            }
        }

        # If not Sysmon IP field try all the rest of the possible IP fields as of 2018-03-19 and going through 3,000 Windows EventIDs
        else {

            #### Parse all other possible Source IP Address fields, none of the following two fields would exist in any one windows event.. therefore, use "if"/"else if" statements
            # Parse "IpAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Security:4624, Security:4625, Security:4648, Security:4770, Security:4771, Security:4768, Security:4769, Security:5140, Security:5145
            if [IpAddress] {
                mutate { copy => { "IpAddress" => "src_original_value" } }
                if [IpAddress] =~ "^\d{1,3}\." {
                    mutate {
                        rename => { "IpAddress" => "src_ip_addr" }
                        add_field => { "etl_pipeline" => "winevent-ip_conversion-IpAddress" }
                    }
                }
                else {
                    # First try to match IPv6 & IPv4 combined
                    # Last try IPv6 only
                    grok {
                        match => {
                            "IpAddress" =>
                            [
                                "%{IPV6:src_ip_addr}:%{IPV4:src_ip_addr}",
                                "%{IPV6:src_ip_addr}",
                                "%{IPV6:src_ip_addr} %{IPV4:src_ip_addr}"
                            ]
                        }
                        keep_empty_captures => false
                        named_captures_only => true
                        tag_on_failure => [ "_parsefailure", "parsefailure-grok-IpAddress" ]
                        tag_on_timeout => "_groktimeout"
                        # Timeout .250 seconds
                        timeout_millis => 250
                        remove_field => [ "IpAddress" ]
                        add_field => { "etl_pipeline" => "winevent-ip_conversion-grok-IpAddress" }
                    }
                }
            }

            # Parse "SourceAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Security:5152,5154,5156,5157,5158
            else if [SourceAddress] {
                mutate { 
                    rename => { "SourceAddress" => "src_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-SourceAddress" }
                }
            }

            # Parse "ClientAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Security:4778,4779,4825
            else if [ClientAddress] {
                mutate {
                    rename => { "ClientAddress" => "src_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-ClientAddress" }
                }
            }

            # Parse "ClientIPAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Citrix-XenDesktop-BrokerMonitor/Operational:4,5,44,45
            else if [ClientIPAddress] {
                mutate {
                    rename => { "ClientIPAddress" => "src_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-ClientIPAddress" }
                }
            }

            # Parse "ClientIP" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational:131
            else if [ClientIP] {
                mutate { copy => { "ClientIP" => "src_original_value" } }
                # First lets substitute any characters that have been seen that would cause bad parsing/values
                mutate {
                    gsub => [ "ClientIP", "[\[\]]", "" ]
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-gsub-ClientIP" }
                }
                if [ClientIP] =~ "^\d{1,3}\." {
                    dissect {
                        mapping => { "ClientIP" => "%{src_ip_addr}:%{port_src}" }
                        tag_on_failure => [ "_parsefailure", "parsefailure-dissect-ClientIP" ]
                        remove_field => [ "ClientIP" ]
                        add_field => { "etl_pipeline" => "winevent-ip_conversion-dissect-ClientIP" }
                    }
                }
            }

            # Parse "IPString" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational:139,140
            else if [IPString] {
                mutate {
                    rename => { "IPString" => "src_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-IPString" }
                }
            }
            #### ^ DONE w/ All Src IP parsing ####


            #### Parse all other possible Destination IP Address fields, none of the following two fields would exist in any one windows event.. therefore, use "if"/"else if" statements
            # Parse "DestAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Application:1039 SourceName Citrix Broker Service
            if [DestAddress] {
                mutate {
                    rename => { "DestAddress" => "dst_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-DestAddress" }
                }
            }

            # Parse "LaunchedViaIPAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Citrix-XenDesktop-BrokerMonitor/Operational:4,5,44,45
            else if [LaunchedViaIPAddress] {
                mutate {
                    rename => { "LaunchedViaIPAddress" => "dst_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-LaunchedViaIPAddress" }
                }
            }

            # Parse "MachineIpAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Citrix-XenDesktop-BrokerMonitor/Operational:10
            else if [MachineIpAddress] {
                mutate {
                    rename => { "MachineIpAddress" => "dst_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-MachineIpAddress" }
                }
            }

            # Parse "ipAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Application:1039 SourceName Citrix Broker Service
            else if [ipAddress] {
                mutate {
                    rename => { "ipAddress" => "dst_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-ipAddress" }
                }
            }

            # Parse "Value" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Microsoft-Windows-TerminalServices-RDPClient/Operational:1102,1024
            # Only perform on the above EIDs because otherwise it may be values that are incomprehensible
            else if [Value] and [log_name] =~ /^[mM]icrosoft\-[wW]indows\-[tT]erminal[sS]ervices\-[rdp|RDP][cC]lient\/[oO]perational$/ {
                if [event_id] == 1102 {
                    mutate {
                        rename => { "Value" => "dst_ip_addr" }
                        add_field => { "etl_pipeline" => "winevent-ip_conversion-1102-Value" }
                    }
                }
                else if [event_id] == 1024 {
                    mutate {
                        rename => { "Value" => "dst_ip_addr" }
                        add_field => { "etl_pipeline" => "winevent-ip_conversion-1024-Value" }
                    }
                }
            }
            # Parse "TargetServer" field
            # Seen in the following EventIDs (not necessarily exhaustive)IbPK6g
            # Security:5378
            else if [TargetServer] {
                mutate {
                    rename => { "TargetServer" => "dst_ip_addr" }
                    copy => { "dst_ip_addr" => "dst_original_value" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-TargetServer" }
                }
                mutate {
                    gsub => [ "dst_ip_addr", "^(.*?)\/", "" ]
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-gsub-TargetServer" }
                }
            }
            #### ^ DONE w/ All Dst IP parsing ####


            #### Parse all possible Destination NAT IP Address fields, none of the following two fields would exist in any one windows event.. therefore, use "if"/"else if" statements
            # Parse "ConnectedViaIPAddress" field
            # Seen in the following EventIDs (not necessarily exhaustive)
            # Citrix-XenDesktop-BrokerMonitor/Operational:4,44
            if [ConnectedViaIPAddress] {
                mutate {
                    rename => { "ConnectedViaIPAddress" => "dst_nat_ip_addr" }
                    add_field => { "etl_pipeline" => "winevent-ip_conversion-ConnectedViaIPAddress" }
                }
            }
            #### ^ DONE w/ All Dst NAT IP parsing ####
        }
    }
}