# HELK src-ip filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {

  # If src_ip_addr field exists from previous config settings
  if [src_ip_addr] {
    # Make sure IP is valid, rfc check, private/public, and cleanup common things like preceeding "0" and or file share/path "\\"
    # Also determine if IPv4 or IPv6
    ruby {
      path => "/usr/share/logstash/pipeline/ruby/ip_clean_and_public.rb"
      script_params => {
        "parent_field" => "src"
        "ip" => "src_ip_addr"
        "is_ipv6" => "src_is_ipv6"
      }
      tag_on_exception =>  "_rubyexception-all-src_ip_clean_and_public"
      add_field => { "etl_pipeline" => "src_ip_addr_clean_and_public" }
    }
    # If still has valid IP(s) after cleanup
    if [src_ip_addr] {
      #TODO:eventually support geo/asn on all IPs if array, right now just is only one (and not if first IP is private and second is public it will do on first one per doc on using logstash geoip plugin )
      #if [@metadata][src_ip_addr][number_of_ip_addresses] == 1 {
        # Only perform geo enrichment if is a public IP
        if [src_ip_public] == "true" {
          geoip {
            source => "src_ip_addr"
            target => "meta_src_ip_geo"
            default_database_type => "City"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            cache_size => 90000
            add_field =>  {
              "[@metadata][src_ip_addr_geo_location_successful]" => "true"
              "etl_pipeline" => "src_ip_addr_geo_city"
            }
            #fields => [
            #  "city_name",
            #  "continent_code",
            #  "country_code2",
            #  "country_code3",
            #  "country_name",
            #  "dma_code",
            #  "latitude",
            #  "location",
            #  "longitude",
            #  "postal_code",
            #  "region_name", "timezone"
            #]
            remove_field => [
              "[meta_src_ip_geo][ip]",
              "[meta_src_ip_geo][real_region_name]"
            ]
            tag_on_failure => [ "_parsefailure", "_geoip_lookup_failure", "parsefailure-geoip-city-src_ip_addr" ]
          }
          geoip {
            source => "src_ip_addr"
            target => "meta_src_ip_geo"
            default_database_type => "ASN"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            cache_size => 90000
            add_field =>  {
              "[@metadata][src_ip_addr_geo_asn_successful]" => "true"
              "etl_pipeline" => "src_ip_addr_geo_asn"
            }
            remove_field => [ "[meta_src_ip_geo][ip]" ]
            tag_on_failure => [ "_parsefailure", "_geoip_lookup_failure", "parsefailure-geoip-asn-src_ip_addr" ]
          }
        }
      #}
    }
  }

}