# HELK winevent-winlogbeats filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron), Roberto Rodriguez (@Cyb3rWard0g)
# License: GPL-3.0

filter {
  ## Use the following to get rid of the prepended fields that (elastic) winlogbeats adds
  # Winlogbeat 6.x
  if [type] == "wineventlog" and [beat] {
    ruby {
      code => "
        eventdata = event.get('event_data')
        # Sometimes does not exist, so check that first -- then move the nests
        if !eventdata.nil?
          eventdata.each {|k, v|
            if eventdata.to_s != '(NULL)'
              event.set(k, v)
            end
          }
        end
        # Finally remove the nest completely
        event.remove('event_data')
      "
      tag_on_exception =>  "ruby_exception_winlogbeat_6_cleanup"
      add_field => {
        "etl_pipeline" => "winlogbeat_6-field_nest_cleanup"
        "[@metadata][helk_parsed]" => "yes"
      }
      remove_field => [ "[beat]" ]
    }
    mutate {
      add_field => {
        "event_original_time" => "%{@timestamp}"
        "etl_pipeline" => "winlogbeat_6-general_cleanup"
      }
      rename => {
        "computer_name" => "host_name"
        "[beat][hostname]" => "beat_hostname"
        "[beat][version]" => "beat_version"
        "[beat][name]" => "beat_name"
      }
    }
  }
  #TODO: if ever needing to distinguish minor versions between 7 or 8 (ie: if major change from say 7.7.2 and 7.8.1) then use `agent.version` for the logic to accomplish what is needed
  # Winlogbeat >= 7.x
  else if [agent][type] == "winlogbeat" {
    ruby {
      code => '
        # event_data nested field
        eventdata = event.get("[winlog][event_data]")
        # Sometimes does not exist, so check that first -- then move the nests
        if !eventdata.nil?
          eventdata.each {|k, v|
            if eventdata.to_s != "(NULL)"
              # Set the new fields
              event.set(k, v)
            end
          }
        end
        # Finally remove the nest completely
        event.remove("[winlog][event_data]")

        # user nested field
        user_field = event.get("[winlog][user]")
        user_field_new = Hash.new
        # Sometimes does not exist, so check that first -- then move the nests
        if !user_field.nil?
          user_field.each {|k, v|
            if user_field.to_s != "(NULL)"
              user_field_new.store(k,v)
            end
          }
          # Set the new fields
          event.set("[user]", user_field_new)
        end
        # Finally remove the nest completely
        event.remove("[winlog][user]")

        # user_data nested field
        user_data_field = event.get("[winlog][user_data]")
        user_data_field_new = Hash.new
        # Sometimes does not exist, so check that first -- then move the nests
        if !user_data_field.nil?
          user_data_field.each {|k, v|
            if user_data_field.to_s != "(NULL)"
              # Set the new fields
              event.set(k, v)
            end
          }
        end
        # Finally remove the nest completely
        event.remove("[winlog][user_data]")
      '
      tag_on_exception =>  "ruby_exception_winlogbeat_7_and_above-cleanup"
      add_field => {
        "etl_pipeline" => "winlogbeat_7_and_above-field_nest_cleanup"
        "[@metadata][helk_parsed]" => "yes"
      }
    }
    # NOT ANYMORE -> # Also, for continuity copy the new fields for Winlogbeat 7 back to the original field names (Winlogbeat 6.x and before). However, lets keep them - for future or anyone else doing something different.
    mutate {
      rename => {
        "[agent][ephemeral_id]" => "etl_host_agent_ephemeral_uid"
        "[agent][hostname]" => "beat_hostname"
        "[agent][id]" => "etl_host_agent_uid"
        "[agent][name]" => "beat_name"
        "[agent][type]" => "etl_host_agent_type"
        "[agent][version]" => "beat_version"
        "[error][message]" => "message_error"
        "[event][original]" => "xml"
        "[event][timezone]" => "beat_timezone"
        "[host][name]" => "[z_elastic_ecs][host][name]"
        "[log][level]" => "level"
        "[winlog][activity_id]" => "activity_id"
        "[winlog][api]" => "type"
        "[winlog][channel]" => "log_name"
        "[winlog][computer_name]" => "host_name"
        "[winlog][event_id]" => "event_id"
        "[winlog][keywords]" => "keywords"
        "[winlog][provider_guid]" => "provider_guid"
        "[winlog][provider_name]" => "source_name"
        "[winlog][process][pid]" => "process_id"
        "[winlog][process][thread][id]" => "thread_id"
        "[winlog][opcode]" => "opcode"
        "[winlog][record_id]" => "record_number"
        "[winlog][task]" => "task"
        "[winlog][version]" => "version"
        # Should not be implemented unless ECS enabled, in that case needs handled elsewhere#"[process][executable]" => "[process][exe]" 
      }
      #remove_field => [ "[winlog]", "[host]" ]
      add_field => {
        "event_original_time" => "%{@timestamp}"
        "etl_pipeline" => "winlogbeat_7_and_above-field_cleanups"
      }
    }
    # Rename nested fields that still may be around, don't want to just remove encase later on things are added
    mutate {
      rename => {
        "[agent]" => "[z_elastic_ecs][agent]"
        "[ecs]" => "[z_elastic_ecs][ecs]"
        "[event]" => "[z_elastic_ecs][event]"
        "[host]" => "[z_elastic_ecs][host]"
        "[log]" => "[z_elastic_ecs][log]"
        "[user]" => "[z_elastic_ecs][user]"
        "[winlog]" => "[z_elastic_ecs][winlog]"
      }
    }

  }
}