# HELK dst-ip filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
    # If dst_ip_addr field exists from previous config settings
    if [dst_ip_addr] {
        mutate { add_field => { "z_logstash_pipeline" => "8112" } }

        #TODO:could eventually make even faster by doing a if not begins/regex-starts with 0,1,2 then just immediatly set as ip is public else check the rest of stuff.
        ruby {
            code => "
                # Get the ip address from the event
                ip_addresses = event.get('dst_ip_addr')

                ip_addresses_public = Array.new
                ip_addresses_type = Array.new

                for ip_address in ip_addresses
                    # Set IP type and public for now so easier checking later
                    ip_public = true
                    ip_type = 'public'

                    # Private/RFC1918
                    if ip_address.start_with?( '10.', '192.168.' )
                        ip_public = false
                        ip_type = 'private'

                    # (Local)link-local RFC3927
                    elsif ip_address.start_with?( '169.254.' )
                        ip_public = false
                        ip_type = 'local'

                    # Loopback RFC1122-3.2.1.3
                    elsif ip_address.start_with?( '127.' )
                        ip_public = false
                        ip_type = 'loopback'

                    # RFC 1122
                    elsif ip_address.start_with?('0.')
                        ip_public = false
                        ip_type = 'this_rfc1122'

                    # IPv6 to IP4 anycast RFC3068
                    elsif ip_address.start_with?( '192.88.99.' )
                        ip_public = false
                        ip_type = '6to4'

                    #  Reserved RFC5736, RFC1122-3.2.1.3, RFC2544, RFC5737
                    elsif ip_address.start_with?( '0.', '192.0.0.', '192.0.1.', '192.0.2.', '192.18.', '192.19.', '198.51.100.', '203.0.113.' )
                        ip_public = false
                        ip_type = 'reserved'

                    # Private/RFC-1918 -- continued -- 172.16.0.0-17.31.255.255
                    elsif ip_address.start_with?( '172.' )
                        # Check if 2nd octet is in range(between) 16 to 31
                        if ip_address.split('.')[1].to_i.between?(16,31)
                            ip_public = false
                            ip_type = 'private'
                        end

                    # Private/RFC-1918 -- continued -- 100.64.0.1 - 100.127.255.254
                    elsif ip_address.start_with?( '100.' )
                        # Check if 2nd octet is in range(between) 64 to 127
                        if ip_address.split('.')[1].to_i.between?(64,127)
                            ip_public = false
                            ip_type = 'private'
                        end

                    # The remaining possible NON public/routable IPs begin with 2 and are either multicast or broadcast
                    elsif ip_address.start_with?( '2' )
                        # Broadcast
                        if ip_address == '255.255.255.255'
                            ip_public = false
                            ip_type = 'broadcast'

                        # Multicast
                        # Check if 1st octet is in range(between) 224 to 255
                        elsif ip_address.split('.')[0].to_i.between?(224,255)
                            ip_public = false
                            ip_type = 'multicast'
                        end
                    end
                    # set parameters for array
                    ip_addresses_public.push(ip_public)
                    ip_addresses_type.push(ip_type)
                end

                # Use to make array versus non array
                # and then Set event parameters accordingly
                if event.get('temp_number_of_ipv4_dst_addresses') == 1
                    event.set('dst_ip_addr', ip_addresses[0])
                    event.set('dst_ip_public', ip_addresses_public[0])
                    event.set('dst_ip_type', ip_addresses_type[0])
                else
                    event.set('dst_ip_public', ip_addresses_public)
                    event.set('dst_ip_type', ip_addresses_type)
                    # ip is already array so no need to set accordingly
                end
            "
            tag_on_exception =>  "_rubyexception_8112"
            remove_field => [ "temp_number_of_ipv4_dst_addresses" ]
        }

        # Perform GeoIP enrichment if is public / internet routable
        if [dst_ip_public] {
            # Geo Location
            geoip {
                source => "dst_ip_addr"
                target => "meta_dst_ip_geo"
                default_database_type => "City"
                # database => "/usr/share/logstash/GeoIP/GeoLite2-City.mmdb"
                # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
                cache_size => 90000
                remove_field => [ "[meta_dst_ip_geo][ip]", "[meta_dst_ip_geo][real_region_name]" ]
                #tag_on_failure => [ "_geoip_ip_dst_failure", "_geoip_ip_dst_location_lookup_failure", "_geoip_lookup_failure" ]
                # Do not tag, so we can use tags (if they only just even exist, versus each tag within) as a method to determine parsing failure(s) (much) easier.
                tag_on_failure => [ ]
            }
            #QnVpbHQgYnkgTmF0ZSBHdWFnZW50aSBAbmV1NXJvbg==
            # Geo ASName and ASNumber / BGP AS Info
            geoip {
                source => "dst_ip_addr"
                target => "meta_dst_ip_geo"
                default_database_type => "ASN"
                # database => "/usr/share/logstash/GeoIP/GeoLite2-ASN.mmdb"
                remove_field => [ "[meta_dst_ip_geo][ip]" ]
                # tag_on_failure => [ "_geoip_ip_dst_failure", "_geoip_ip_dst_as_lookup_failure", "_geoip_lookup_failure" ]
                # Do not tag, so we can use tags (if they only just even exist, versus each tag within) as a method to determine parsing failure(s) (much) easier.
                tag_on_failure => [ ]
            }
        }
    }

}