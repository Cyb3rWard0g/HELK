# HELK Zeek and Corelight main/all configuration
# HELK build Stage: Alpha
# Author: Roberto Rodriguez (@Cyb3rWard0g), Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
  if [etl_kafka_topic] == "zeek" or [etl_kafka_topic] =~ "^corelight" {

    # (Original event) message field kept
    if [message] {
      # original event kept but not already JSON expanded
      if ![ts] {
        json {
          source => "message"
          tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-json_codec" ]
          remove_field => [ "message" ]
          add_field => { "etl_pipeline" => "zeek-json-conversion" }
          skip_on_invalid_json => true
        }
      }
      # else, original event kept but JSON already applied nothing to do
    }

    # It's in the zeek kafka topic, but for some reason has no fields the way it should
    else if ![ts] {
      mutate {
        add_field => { "etl_pipeline" => "zeek-format-unkown" }
        add_tag => [ "parsefailure-critical" ]
      }
    }
    # else JSON already applied nothing to do
    
    # Corelight specific, Corelight can be distinguished from open source zeek simply by the difference that corelight has the field `_write_ts`
    if [_write_ts] {
      mutate {
        add_field => { "event_vendor" => "Corelight" }
      }
      date {
        match => [ "_write_ts", "ISO8601" ]
        timezone => "UTC"
        target => "event_recorded_time"
        remove_field => "_write_ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-date-event_recorded_time", "parsefailure-date-_write_ts" ]
        add_field => { "etl_pipeline" => "zeek-corelight-date-_write_ts" }
      }
    }

    # Perform date conversion
    if [event_vendor] == "Corelight" {
      # Corelight already converts Unix TS so need to perform differently than opensource
      date {
        match => [ "ts", "ISO8601" ]
        timezone => "UTC"
        target => "@timestamp"
        remove_field => "ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-date-@timestamp", "parsefailure-date-corelight-ts" ]
        add_field => {
          "event_original_time" => "%{@timestamp}"
          "etl_pipeline" => "zeek_corelight_timestamp"
        }
      }
    }
    else {
      # Zeek uses UNIX/EPOCH timestamp
      date {
        match => [ "ts", "UNIX" ]
        timezone => "UTC"
        target => "@timestamp"
        remove_field => "ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-date-@timestamp", "parsefailure-date-zeek-ts" ]
        add_field => {
          "etl_pipeline" => "zeek_timestamp"
        }
      }
    }

    # 
    #mutate {
    #  add_field => {
    #    "event_log" => "zeek"
    #  }
    #}
    #
    #
    #
    ## Event Type
    #mutate {
    #  add_field => {
    #    "event_type" => "network"
    #    # "[@metadata][index_name]" => "network"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "miscellaneous"
    #    # "[@metadata][index_name]" => "miscellaneous"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "detection"
    #    # "[@metadata][index_name]" => "detection"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "miscellaneous"
    #    # "[@metadata][index_name]" => "miscellaneous"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "netcontrol"
    #    # "[@metadata][index_name]" => "netcontrol"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "observations"
    #    # "[@metadata][index_name]" => "observations"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "files"
    #    # "[@metadata][index_name]" => "files"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "diagnostics"
    #    # "[@metadata][index_name]" => "diagnostics"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_type" => "unknown"
    #    # "[@metadata][index_name]" => "unknown"
    #  }
    #}

  }
}
