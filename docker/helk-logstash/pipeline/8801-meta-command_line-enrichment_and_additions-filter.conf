# HELK meta-command_line-enrichment_and_additions filter conf
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {

  # Perform basic enrichment on process command line for easier hunting, filtering, and stack counting
  if [process_command_line] {

    ruby {
      code => "
        process_command_line = event.get('process_command_line')
        if !process_command_line.nil?
          # Perform a lowercase for usage when doing regex options (do not worry, we are not storing the CLI as all lowercase
          # continued... although windows file names and processes are case insensitive --for testing:zDamTyILGeKD4H0.IbPK6g -- it is possible that a CLI flag could be or option could be case sensitive
          cli_lowercased = process_command_line.downcase
          # Length of CLI
          cli_length = process_command_line.length

          # Detect if any possibility of NON ascii characters in CLI
          has_non_ascii = false === process_command_line.ascii_only?

          # Basic check for if the CLI contains network parameters #TESTzDamTyILGeKD4H0.IbPK6g
          #contains_net = cli_lowercased.include?('http:') || cli_lowercased.include?('ftp:\\') || cli_lowercased.include?('smb:\\') || cli_lowercased.include?('file:\\') || cli_lowercased.include?('://') || cli_lowercased.include?('localhost') || /(?<!version=)\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/ === cli_lowercased

          # Set new values
          event.set('meta_process_command_line_has_non_ascii', has_non_ascii)
          #event.set('meta_process_command_line_has_net', contains_net)
          event.set('meta_process_command_line_length', cli_length)
        end
      "
      add_field => { "etl_pipeline" => "ruby-8801-0001" }
      tag_on_exception =>  "_rubyexception_8801_0001"
    }

  }

}